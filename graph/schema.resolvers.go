package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	dbmodel "skeleton-service/database/model"
	"skeleton-service/graph/model"

	"go.uber.org/zap"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	r.Logger.Info("createTodo", zap.Any("input", input))
	newTodo := dbmodel.Todo{Text: input.Text, UserID: input.UserID, Done: false}
	r.DB.Create(&newTodo)
	return convertDBTodoToModel(&newTodo), nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	todo := model.Todo{ID: "1234", Text: "Hello", Done: false}
	r.Logger.Info("todos", zap.Any("todo", todo))
	return []*model.Todo{&todo}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

func convertDBTodoToModel(dbTodo *dbmodel.Todo) *model.Todo {
	return &model.Todo{
		ID:   dbTodo.ID,
		Text: dbTodo.Text,
		Done: dbTodo.Done,
		User: &model.User{ID: dbTodo.UserID, Name: "Test User"},
	}
}
